<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">
        
	<display-name>跨境电商平台</display-name>
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>CBB_PF.root</param-value>
	</context-param>
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>
			org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping> 

	<!-- load the Spring configuration file -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/classes/resourceConfig/springConfig/*.xml
		</param-value>
	</context-param>
    <!-- 在web.xml中注册IntrospectorCleanupListener监听器以解决struts,quartz等框架可能产生的内存泄露问题 -->
    <!-- 可以保证在web 应用关闭的时候释放与掉这个web 应用相关的class loader 和由它管理的类 -->
	<listener>  
        <listener-class>  
            org.springframework.web.util.IntrospectorCleanupListener  
        </listener-class>  
    </listener>

   <!-- Log4j load -->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
    <context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/classes/resourceConfig/logConfig/log4j.properties </param-value>
   </context-param>

	<!-- define the Spring listener -->
	<listener>
		<listener-class>
			com.foo.servlet.MyContextLoaderListener
		</listener-class>
	</listener>
<!-- 	<listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener> -->
	
	<filter>
		<filter-name>struts2</filter-name>
		<filter-class>
			org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
<!--     <filter>
		<filter-name>i18nFilter</filter-name>
		<filter-class>com.fujitsu.filter.I18nFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>i18nFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping> -->
	<servlet>
		<servlet-name>DruidStatView</servlet-name>
		<servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>DruidStatView</servlet-name>
		<url-pattern>/druid/*</url-pattern>
	</servlet-mapping>
	
	<!--配置CXFServlet begin-->  
	<servlet>  
	    <servlet-name>CXFServlet</servlet-name>  
	    <servlet-class>  
	        org.apache.cxf.transport.servlet.CXFServlet  
	    </servlet-class>  
	    <load-on-startup>1</load-on-startup>  
	</servlet>  
	<servlet-mapping>  
	    <servlet-name>CXFServlet</servlet-name>  
	    <!-- url可自定义配置，用于CXFServlet请求地址拦截,访问会用到 -->  
	    <url-pattern>/WS/*</url-pattern>  
	</servlet-mapping>  
	<!--配置CXFServlet end -->
	
	<servlet>
    	<servlet-name>InitJob</servlet-name>
    	<servlet-class>com.foo.servlet.InitJob</servlet-class>
    	<load-on-startup>3</load-on-startup>
	</servlet>
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
